package com.github.archturion64.thirdeye.controllers;

import com.github.archturion64.thirdeye.domains.Vulnerability;
import com.github.archturion64.thirdeye.services.DeviceService;
import com.github.archturion64.thirdeye.services.VulnerabilityService;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;

@Controller
@AllArgsConstructor
public class VulnerabilityController {
    private final VulnerabilityService vulnerabilityService;

    @RequestMapping("/vulnerabilities")
    public String viewVulnerabilitiesPage(Model model) {
        return "redirect:/vulnerability/list";
    }

    @RequestMapping("/vulnerability/list")
    public String showVulnerabilityList(Model model) {
        final List<Vulnerability> vulnerabilityList = vulnerabilityService.listAll();
        model.addAttribute("vulnerabilityList", vulnerabilityList);
        return "vulnerability/list_vulnerability";
    }

    @RequestMapping("/vulnerability/new")
    public String showNewVulnerabilityForm(Model model){
        final Vulnerability vulnerability = new Vulnerability();
        model.addAttribute("vulnerability", vulnerability);
        return "vulnerability/new_vulnerability";
    }

    @RequestMapping(value = "/vulnerability/save", method = RequestMethod.POST)
    public String saveVulnerability(@ModelAttribute("vulnerability") Vulnerability vulnerability){
        vulnerabilityService.save(vulnerability);
        return "redirect:/vulnerability/list";
    }

    @RequestMapping("/vulnerability/edit/{id}")
    public ModelAndView editVulnerabilityForm(@PathVariable(name="id") long id){
        ModelAndView mav = new ModelAndView("vulnerability/edit_vulnerability");

        final Vulnerability vulnerability = vulnerabilityService.get(id);
        mav.addObject("vulnerability", vulnerability);

        return mav;
    }

    @RequestMapping("/vulnerability/delete/{id}")
    public String deleteVulnerability(@PathVariable(name="id") long id){
        vulnerabilityService.delete(id);
        return "redirect:/vulnerability/list";
    }
}
